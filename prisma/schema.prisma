generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Company       Company?
  JobSeeker     JobSeeker?

  onBoardingComplete Boolean @default(false)
  stripeCustomerId   String? @unique()

  userType UserType?
  savedJob SaveJobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  JOB_SEEKER
  COMPANY
}

model Company {
  id       String    @id @default(uuid())
  name     String
  location String
  about    String
  logo     String
  website  String
  xAccount String?
  jobPost  JobPost[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id     String @id @default(uuid())
  name   String
  about  String
  resume String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id              String         @id @default(uuid())
  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]
  status          JOBPOST_STATUS @default(DRAFT)

  savedJob SaveJobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
}

enum JOBPOST_STATUS {
  DRAFT
  ACTIVE
  EXPIRED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaveJobPost {
  id String @id @default(uuid())

  JobPost   JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  jobPostId String
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
